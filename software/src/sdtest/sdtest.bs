\ Emulator control

extern emu_exit ( see assembly runtime )

: fail		d# 1 emu_exit ;
: pass		d# 0 emu_exit ;

\ Console I/O

$0E00000000000000 const dbgout
$0E00000000000001 const dbgin

: ready		begin dbgin c@ if exit then again ;

: emit		d> dbgout c! ;
: cr		d# 13 >d emit d# 10 >d emit ;
: strtail	0 d@ d# 1 - 0 d!  1 d@ d# 1 + 1 d! ;
: type		begin 0 d@ while 1 d@ c@ >d emit strtail repeat d> d> ;

: div16		0 d@ 2/ 2/ 2/ 2/ 0 d! ;
: div256	div16 div16 ;
: pr4		d> d# 15 and s" 0123456789ABCDEF" nip + c@ >d emit ;
: pr8		0 d@ >d div16 pr4 pr4 ;
: pr16		0 d@ >d div256 pr8 pr8 ;
: pr32		0 d@ >d div256 div256 pr16 pr16 ;
: pr64		0 d@ >d div256 div256 div256 div256 pr32 pr32 ;

$0100000000000000 const gpinp
$0100000000000008 const gpout

\ \\ Low-level, bit-banging SD card access library.

\ Set or toggle the SD/MMC card's clock bit.

: sdclk0	gpout @ d# -9 and gpout ! ;
: sdclk1	gpout @ d# 8 or gpout ! ;
: sdclkt	gpout @ d# 8 xor gpout ! ;

\ Set or clear the SD/MMC card's MOSI pin.
\ For sdmosi, the state of MOSI is taken from bit 7 of the byte on the
\ data stack.  The byte is shifted for subsequent calls, and to vacate space
\ for filling in MISO status as well (see sdmiso).

: sdmosi0	gpout @ d# -5 and gpout ! ;
: sdmosi1	gpout @ d# 4 or gpout ! ;
: sdmosi	gpout @ d# -5 and 0 d@ u2/ u2/ u2/ u2/ u2/ d# 4 and or gpout ! 0 d@ 2* 0 d! ;

\ Set or clear the SD/MMC card's slave-select (aka chip select) pin.

: sdcs0		gpout @ d# -3 and gpout ! ;
: sdcs1		gpout @ d# 2 or gpout ! ;

\ Retrieve state of the SD/MMC card's MISO pin.  Accumulate the results into
\ the byte on the top of the data stack.

: sdmiso	gpinp @ d# 4 and 2/ 2/ 0 d@ or 0 d! ;

\ Exchange a byte of data with the attached SPI slave.

: sdxbit	sdmosi sdclkt sdclkt sdmiso ;
: sdexch	sdxbit sdxbit sdxbit sdxbit sdxbit sdxbit sdxbit sdxbit ;

\ Receive a byte from the SPI slave.  Use 255 as the byte sent, to force
\ MOSI high during the transaction.

: sdrx		d# 255 >d sdexch 0 d@ d# 255 and 0 d! ;

\ Wait for MISO line to assert high.

: sdwmiso	begin sdrx d> d# 1 and if exit then again ;
: sdwdata	begin sdrx d> h# FE xor 0=if exit then again ;

\ Toggle the clock 8 times.  MOSI is high during this operation.  Received
\ data is discarded.

: sdgap		sdrx d> ;

\ Idle the SD/MMC link, helping to put it into SPI mode.

: sd80cyc	d# 10 >d begin 0 d@ while sdgap d> d# 1 - >d repeat d> ;
: sdidle	sdclk0 sdmosi1 sdcs1 sd80cyc sdwmiso ;

\ Receive a response from the SD/MMC device.  Depending on the protocol needs,
\ this can be 1-byte in length (sdr1), or 5-bytes in length (sdr7, which can
\ also be used to receive R3, R5, et. al. responses too).
\ 
\ Bits 0-7 of the return value of sdr1 contains the R1 byte, while for sdr7,
\ you will find it in bits 32-39.  Bits 0-31 contain the additional four
\ R3/R5/R7 bytes.

: _sh		d> d> 2* 2* 2* 2* 2* 2* 2* 2* or >d ;
: sdr1		begin sdrx 0 d@ h# FF xor if exit then d> again ;
: sdr7		sdr1 sdrx _sh sdrx _sh sdrx _sh sdrx _sh ;
: sdr1b		sdr1 sdwmiso ;

\ Canned byte streams for interacting with the SD/MMC device.

: _cmd0		h# 40 >d sdexch d> ;
: _cmd1		h# 41 >d sdexch d> ;
: _cmd8		h# 48 >d sdexch d> ;
: _cmd16	h# 50 >d sdexch d> ;
: _cmd17	h# 51 >d sdexch d> ;
: _cmd24	h# 58 >d sdexch d> ;
: _cmd55	h# 77 >d sdexch d> ;

: _0		h# 00 >d sdexch d> ;
: _1		h# 01 >d sdexch d> ;
: _87		h# 87 >d sdexch d> ;
: _95		h# 95 >d sdexch d> ;
: _AA		h# AA >d sdexch d> ;

: sdcmd0	sdcs0 _cmd0 _0 _0 _0 _0 _95 sdr1 sdcs1 sdgap ;
: sdcmd1	sdcs0 _cmd1 _0 _0 _0 _0 _0 sdr1 sdcs1 sdgap ;
: sdcmd8	sdcs0 _cmd8 _0 _0 _1 _AA _87 sdr7 sdcs1 sdgap ;
: sdcmd55	sdcs0 _cmd55 _0 _0 _0 _0 _0 sdr1 sdcs1 sdgap ;

\ Send a 32-bit, big-endian value to the SD/MMC device.

: _b0		div256 div256 div256 sdexch d> ;
: _b1		div256 div256 sdexch d> ;
: _b2		div256 sdexch d> ;
: sdparam	0 d@ >d _b0 0 d@ >d _b1 0 d@ >d _b2 sdexch d> ;

\ Alter the configured block size.  It normally defaults to 1024 bytes.
\ However, for many applications, 512 bytes is better.  In any case, you
\ should set it explicitly anyway, because there's no reason to treat the 1024
\ byte default as a given standard behavior.

: sdblksz	sdcs0 _cmd16 sdparam _0 sdr1 sdcs1 sdgap ;

\ Prepares an SD/MMC card for a block of data to write, or to send a block of
\ data.  Note that these commands leave the SD card selected!

: sdwrcmd	sdcs0 _cmd24 sdparam _0 sdr1 ;
: sdrdcmd	sdcs0 _cmd17 sdparam _0 sdr1 ;

\ SD card insert tests.

: wait		S" Please insert SD card now." >d >d type cr ready ;
: errins	S" CD# should be 0 when card is inserted." >d >d type cr fail ;
: tins		wait gpinp @ d# 1 and 0=if exit then errins ;

\ "Mount" the SD card.  This prepares the card for actual use.

: _idlexp	pr64 cr S" Expected idle card after CMD0" >d >d type cr fail ;
: _v1exp	pr64 cr S" SD V.1 or MMC V.3 card expected" >d >d type cr fail ;
: _idlexp55	pr64 cr S" Expected idle card after CMD55" >d >d type cr fail ;
: _sdv1exp	pr64 cr S" Expected SD V.1 card after ACMD41" >d >d type cr fail ;
: _blksiz	pr64 cr S" Error enforcing 512 byte block size" >d >d type cr fail ;

: mount		sdidle
		sdcmd0 0 d@ d# 1 xor if _idlexp then d> 
		sdcmd8 0 d@ h# 05FFFFFFFF xor if _v1exp then d> 
		begin
			sdcmd55 0 d@ h# 01 xor if _idlexp55 then d>
			sdcmd1 0 d@ d# 1 xor if d> d# 0 >d else d> d# 1 >d then
		d> while repeat
		d# 512 >d sdblksz 0 d@ if _blksiz then d> ;

\ Write tests

: _wrerr	pr64 cr S" Write error cmd phase" >d >d type cr fail ;
: _wrerr2	pr64 cr S" Write error data phase" >d >d type cr fail ;

: dstart	h# FE >d sdexch d> ;
: dbody		d# 512 >d begin 0 d@ while 1 d@ >d sdexch d> 0 d@ d# 1 - 0 d! repeat d> d> ;
: payload	dstart dbody _0 _0 sdr1b sdcs1 0 d@ d# 5 and d# 5 xor if _wrerr2 then d> ;
: toblk		0 d@ 2* 2* 2* 2* 2* 2* 2* 2* 2* >d ;
: blockAA	toblk sdwrcmd 0 d@ if _wrerr then d> h# AA >d payload ;
: block55	toblk sdwrcmd 0 d@ if _wrerr then d> h# 55 >d payload ;
: wrodd		d# 1 >d begin 0 d@ d# 101 - +if d> exit then blockAA 0 d@ d# 2 + 0 d! again ;
: wreven	d# 0 >d begin 0 d@ d# 100 - +if d> exit then block55 0 d@ d# 2 + 0 d! again ;
: write		wrodd wreven ;

\ Read tests

: _rderr	pr64 cr S" Read error cmd phase" >d >d type cr fail ;
: _rderr2	pr64 cr S" Read error data phase" >d >d type cr fail ;

: chkbyt	sdrx 0 d@ 2 d@ xor if 2 d@ >d pr64 cr 1 d@ >d pr64 cr _rderr2 then d> ;
: content	sdwdata d# 512 >d begin 0 d@ while chkbyt 0 d@ d# 1 - 0 d! repeat d> sdgap sdgap d> sdcs1 ;
: checkAA	toblk sdrdcmd 0 d@ if _rderr then d> h# AA >d content ;
: check55	toblk sdrdcmd 0 d@ if _rderr then d> h# 55 >d content ;
: rdodd		d# 1 >d begin 0 d@ d# 101 - +if d> exit then checkAA 0 d@ d# 2 + 0 d! again ;
: rdeven	d# 0 >d begin 0 d@ d# 100 - +if d> exit then check55 0 d@ d# 2 + 0 d! again ;

: read		rdeven rdodd ;

\ Entry point.

: _		tins mount write read pass ;
