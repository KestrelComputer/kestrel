{"name":"Kestrel","tagline":"A completely open computer design.","body":"The Kestrel project is all about freedom of computing and self-education using\r\nall-homebrew design, right down to having openly documented hardware and\r\nsoftware at all levels, from register-transfer logic all the way\r\nup to OS API and user tutorials.\r\n\r\n# Why?\r\n\r\nWith each passing day, technically capable consumers of computing technology\r\nincreasingly lose their rights with computer hardware.  The successful\r\ndeployment of UEFI in the market, with Microsoft controlling which operating\r\nsystems receive a key that permits it to be booted, poses a potential threat to\r\nOS development freedom.  While some look to prominent Linux suppliers as an\r\nescape from the Intel/Microsoft monopoly, I have taken a different route -- I\r\ndecided to build my own computer completely from scratch.  My computer\r\narchitecture is fully open; anyone can review the source, learn from, and hack\r\nit to suit their needs.\r\n\r\n# Shoulders of Giants\r\n\r\nIts design is informed from a variety of sources based on my experience:\r\n\r\n* Excellence in Hardware Engineering\r\n    * **Atari 800**, for demonstrating how small modules that do one job exceptionally well can interact to comprise a hardware system of exceptional capability for minimum cost.\r\n    * **Atari ST**, for demonstrating how commodity hardware can be assembled to form a long-lived, fan-supported environment that transitioned from a primarily closed-source to open-source community.\r\n    * **Commodore Amiga**, for the same reasons as the Atari 800, except adjusted for newer capabilities afforded by faster bus architectures and wider data paths.  (This comes as no surprise to anyone familiar with Atari hardware, for the Amiga OCS chipset was designed by the same engineers as the Atari 800 chipset, and shares much in the way of architecture.)\r\n* Excellence in Accessible and Usable Documentation\r\n    * **Commodore 64/128**, for having a single volume that provided all levels of knowledge, hardware (including schematics and data sheets) to OS-level system calls.\r\n    * **Commodore Amiga**, for having exceptionally well-written programmers reference manuals that were easy to follow, contained numerous tutorial material, and never sacrificed its value as a reference.\r\n* Excellence in System Software Design\r\n    * **CP/M**, for being the simplest possible thing that could possibly work.\r\n    * **Commodore 64/128**, for pre-dating many concepts later independently rediscovered by the authors of Plan 9 from Bell Labs.  (\"Everything is a GPIB device\", versus, \"Everything is a file,\" and the use of command channels instead of dedicated system calls like `ioctl()`.)\r\n    * **Commodore Amiga**, for demonstrating the effectiveness of preemptive multitasking in a consumer product, without requiring many megabytes of memory.\r\n    * **Jupiter ACE**, for demonstrating what's really possible with only 2KiB of system RAM, of which half is dedicated to video memory.\r\n* Excellence in User Experience\r\n    * **Commodore Amiga**, for demonstrating real-time GUI concepts that set the bar for UX that wasn't matched for more than a decade thereafter.\r\n    * **Jupiter ACE**, for demonstrating that Forth _can_ in fact be packaged for consumer use.\r\n    * **Tripos**, for providing an excellent user experience at the shell.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}