Credits and contributors in alphabetical order, by last name.  If you prefer a
pseudonym, that's OK too:


Brinkhoff, Lars
    Provided .gitattributes for proper Github metrics reporting.

Falvo, Samuel A. II
    Project founder and current visionary.

Ford, Scott
    Designed a really awesome image of a Kestrel's head for use as a logo in
    print and promotional material.  Thanks so much!  You can find his online
    presence at http://haliaeetus123.deviantart.com/ .

FORTH, Inc. (esp. Leon Wagner)
    This excellent company allowed me to rely on the source code to their
    commercial product, SwiftForth 3.6.2, for inspiration and study when I
    was having problems implementing the MARKER word in the Forth interpreter.
    Please extend a hand to Leon Wagner, and support FORTH, Inc. in any way
    you can.  It's the least that we can do to say thank you for their
    contribution.  http://www.forth.com

Hintjens, Pieter
    While Pieter did not contribute code to the project, Pieter did introduce
    me to the C4 process that currently governs how software contributions from
    others are managed.  He also convinced me that I should make a separate
    Github organization for the Kestrel Project.  It took a while, but he was
    right; making a separate organization was instrumental in gaining exposure
    in the open-source community.  Many thanks to Pieter for his experience and
    guidance in how to engage with the community!

Stevenson, Scot
    Brought his TASM6502 project to my attention, and let me base vasm on his
    efforts.  Also, let me relicense the work to be compatible with the rest
    of the Kestrel project.  Although eventually superceded with the Python-
    version of the 2-pass assembler, the latter couldn't have existed without
    the former to serve as a reference implementation.


And many, many more whom I've forgotten over the years, because I didn't think
to create this file earlier.  If you wish to be listed and remember your
contribution, please get in touch with me, so I can give due credit!


Products used in the construction of the Kestrel Computer Project include, but
may not be limited to, the following:

Digilent Nexys 2
    When I was working on the Kestrel-2, the Nexys-2 was my work-horse platform
    for getting hardware working.  It offers a capability to price ratio
    sweet-spot: other FPGA boards either have too little capability for a cheap
    price, or are way too expensive for only a modest upgrade relative to the
    Nexys-2's capabilities.  Still others are virtually PC motherboards sans
    CPU, and priced accordingly.  It's a shame that the Nexys-2 is no longer
    being manufactured.  Still, the first generation Kestrel-3 will be
    synthesized for this platform, simply because it's what I currently have.
    I'll work to port to a different FPGA board only after I get the K3 working
    on a board I know and trust.

    You can find out the complete catalog of Digilent's products at
    http://http://store.digilentinc.com/fpga-programmable-logic/ .

GCC
    The GNU Compiler Collection is used to build the e emulator.  This emulator
    allows me to develop the system firmware and initial software for the
    Kestrel Project long before actually having a tangible piece of hardware to
    play with.  It also allows those who cannot afford to play with the Kestrel
    in an FPGA form to contribute to the project as well.  Find out more at
    https://www.gnu.org/software/gcc

GForth
    GForth is currently used for a number of relatively small tasks in the
    construction of the Kestrel artifacts.  It was used to write the BSPL
    compiler, which supported the RISC-V port of the Kestrel-2's STS operating
    system.  It's currently also being used for the SDB ROM compiler.
    Check it out at https://www.gnu.org/software/gforth

Github
    Github serves as the hosting provider for the Git repositories for the
    Kestrel Computer Project.  You can find our family of repositories at
    https://github.com/kestrelcomputer .  Or, check Github itself out at
    https://github.com .

Leanpub
    I use Leanpub to host my Kestrel 3 User's Guide online.  They take my
    Markdown files comprising a collection of chapters, and their related
    assets, and typesets them into a book that is very close to perfect.  There
    are some features which I wish they'd support, but honestly, I can't
    complain too much here.  My mind is blown with what they're able to do with
    minimally enhanced, plain-text files containing Markdown.  Check them out
    at https://www.leanpub.com .  And while you're at it, you can read the
    Kestrel-3 User's Guide at https://www.leanpub.com/k3ug .

    Oh, almost forgot -- you can also purchase my Kestrel-3 User's Guide in
    PDF, EPub, and Kindle e-Reader formats.

LibSDL 2.x
    This library provides me, ostensibly, access to a virtualized frame buffer.
    I say ostensibly because it's no longer true; it now provides me with a set
    of APIs intended to better model how contemporary graphics cards mitigate
    access to the frame buffer.  Holy cow, that's a lot of words, and it's a
    whole lot more complex to use.  I'm rather surprised it all works at all.
    That said, it offers reasonable performance for what I need, and despite a
    rather steep learning curve (as distinct from the trivial nature of libSDL
    1.2) at first, it's been working pretty well since initial setup.  Find out
    more at https://www.libsdl.org

Redo
    Redo is a top-down build system intended to replace Make.  I chose this
    tool over Make because it was faster and easier to get things moving with.
    Find out more at https://github.com/apenwarr/redo .

Scribus
    A desktop publishing package for Linux which, despite having annoying user
    experience bugs, was solid enough to render both my poster for the RISC-V
    Workshop poster session and the front cover of the Kestrel 3 User's Guide.
    In fact, the cover design is basically just a tweaked version of the
    template included for a playbill.  I couldn't figure out how to resize the
    layout for an 8.5x11" page, so I just exported as a PNG with a high-enough
    resolution that LeanPub was happy using it for the front cover of the book.
    It came to something like 435 DPI or some such.  Looks VERY nice.
    Check them out at https://www.scribus.net .

