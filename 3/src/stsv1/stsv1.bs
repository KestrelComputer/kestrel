\ Exits the emulator with return code 0.
extern bye

\ Supports vectored execution.
extern call

\ Sends the character to the user's console.
: emit ( ch - )
	d> d# $0E00000000000000 c! ;

\ Takes the tail of a string.
: nextch ( addr len - addr+1 len-1 )
	d> d> d# 1 + >d d# 1 - >d ;

\ Sends a string of length len to the console.
: type ( addr len - )
	begin 0 d@ while 1 d@ c@ >d emit nextch repeat d> d> drop drop ;

\ Various console control characters.
: cr ( - )	d# 13 >d emit d# 10 >d emit ;
: space ( - )	d# 32 >d emit ;
: backspace	d# 8 >d emit ;

\ For debugging, _64 is used to print a 64-bit value in hex.
: shr4		d> u2/ u2/ u2/ u2/ >d ;
: shr15		shr4 shr4 shr4 d> u2/ u2/ u2/ >d ;
: shr30		shr15 shr15 ;
: shl4		d> 2* 2* 2* 2* >d ;
: _1		d> S" 0123456789ABCDEF" nip + c@ >d emit ;
: _4		0 d@ >d shr30 shr30 _1  shl4 ;
: _16		_4 _4 _4 _4 ;
: _64		_16 _16 _16 _16 d> ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\ These routines provide a dynamic memory management facility, allowing
\ applications to request blocks of memory of a given size, and to release it
\ later if required.
\ 
\ Pools are maintained through a singly linked, circular list of nodes with
\ the invariant that a node N can point to node M if and only if M appears at
\ a higher address than N, and which follows N immediately.  So, if looking at
\ a memory dump of three nodes, A, B, and C in that order, A generally cannot
\ point directly to C.  The sole exception is if A and B both represent free
\ chunks of memory, where B's space coalesces with A to reduce fragmentation.
\ An order like A, C, B is simply right out, no matter what.  If this happens,
\ the memory pool is corrupted, and will inevitably lead to a crash.
\ 
\ The structure of a node follows (offsets in cells):
\ 
\ +0	next		Pointer to next node in the list, or back to first
\			node.
\ 
\ +1	--1111....	The size of the allocation, in bytes, excluding the
\			header.  Note that memory may not be requested in
\			units smaller than sixteen bytes.
\ 
\ +1	--....111.	Unused bits.  Must be set to zero on writing, and
\			ignored on read.
\ 
\ +1	--.......1	1=block is allocated; 0=block is free.

dword: mplsta	\ Memory Pool Start
dword: mplsiz	\ Memory Pool Size

\ fmtmem formats a memory pool with the required metadata to support
\ allocation requests.  The mplsta variable must point to the start of the
\ memory pool, while mplsiz must contain its size, in bytes.  fmtmem does not
\ return, and cannot fail.
\
\ Beware: formatting a pool that's been previously used will, in effect,
\ forcefully deallocate everything from that pool.

: fmtmem ( a u -- )
	d> mplsiz ! d> mplsta !
	mplsta @ mplsta @ !	( circular list node points to itself )
	mplsiz @ d# -16 and d# 16 -	( size of first free block )
	mplsta @ d# 8 + ! ;

\ getmem allocates at least u bytes of memory.  If successful it returns the
\ address of the allocated block, and a success flag.  Otherwise, undefined
\ results and a false flag are returned.

: gmsplit ( u a -- u a )
	\ Make sure that it makes sense to split.
	\ The current space must hold at least one header and
	\ one 16 byte block, totalling 32 bytes, after splitting.
	1 d@ d# 32 + 0 d@ d# 8 + @ d# -16 and -
	-if
		0 d@ 1 d@ + d# 16 + >d		( addr of next block )
			1 d@ @ 0 d@ !		( link to next block )
			1 d@ d# 8 + @  2 d@ - d# 16 -
				0 d@ d# 8 + !	( size of next block )
			0 d@  1 d@ !		( this blk -> next )
			2 d@ d# 1 or  1 d@ d# 8 + !
		d>
	else
		( Too small to split; just mark whole thing allocated )
		0 d@ d# 8 + @  d# 1 or  0 d@ d# 8 + !
	then ;

: getmem ( u -- a -1 | ? 0 )
	d> d# 15 + d# -16 and >d	( round to at least 16 bytes )

	mplsta @ >d

	begin ( u a )
		\ Search for a free block.

		begin 0 d@ d# 8 + @ d# 1 and while
			d> @ >d				( next mem block )
			0 d@ mplsta @ xor 0=if		( all blocks alloc'ed )
				d# 0 0 d! exit
			then
		repeat

		\ here, 0 d@ points to a free block.
		\ It still might be too small though.
		\ Let's try to coalesce with an adjacent
		\ free block, if one exists.

		0 d@ @ >d d# 1 >d ( a b continue )
		begin 0 d@ while
			1 d@ mplsta @ xor 0=if
				d> d# 0 >d
			else
			1 d@ d# 8 + @ d# 1 and if
				\ Adjacent block is allocated; stop coalescing
				d> d# 0 >d
			else
				\ Assimilate node b's total size.
				d# 16		( size of b's header )
				1 d@ d# 8 + @ + ( size of b's block )
				2 d@ d# 8 + @ + ( size of a's block )
				2 d@ d# 8 + !

				\ Fix linkage
				1 d@ @ 2 d@ !	( a.next = b.next )
				1 d@ @ 1 d!	( b = b.next )
			then then
		repeat
		d> d>	( Discard continue flag and node b reference )

		\ We have as large a free block as we can get.
		\ Let's hope for the best.

		0 d@ d# 8 + @ d# -16 and  1 d@ -  +if	( block is big enough )
			gmsplit
			0 d@ d# 16 + 1 d!  d# -1 0 d!  exit
		then

		\ Block too small, try the next block.

		d> @ >d
		0 d@ mplsta @ xor 0=if d# 0 0 d! exit then
	again ;

\ fremem releases a block of memory, whose pointer was returned by the
\ getmem procedure.

: fremem ( a -- )
	\ Clear allocated bit.

	d> d# 16 - >d		( recover header address )
	0 d@ d# 8 + @ d# -16 and 0 d@ d# 8 + !

	\ Coalesce free blocks of memory downstream.

	0 d@ @ >d ( a b )
	begin 0 d@ d# 8 + @ d# 1 and d# 1 xor while
		\ Assimilate node b's total size.
		d# 16		( size of b's header )
		0 d@ d# 8 + @ + ( size of b's block )
		1 d@ d# 8 + @ + ( size of a's block )
		1 d@ d# 8 + !

		\ Fix linkage
		0 d@ @ 1 d@ !	( a.next = b.next )
		0 d@ @ 0 d!	( b = b.next )

		\ Early exit if we reach end of memory list
		0 d@ mplsta @ xor 0=if
			d> d> exit
		then
	repeat
	d> d> ;

\ Moves a block of memory from src to dst.  The block moved will consist
\ of len bytes.  NOTE: Currently, it does not handle overlapping blocks
\ of memory.  It implements a simple, slow, byte-granular, ascending
\ memory move.

: movmem ( src dst len -- )
	begin
		0 d@ 0=if d> d> d> exit then
		2 d@ c@ 1 d@ c!
		2 d@ d# 1 + 2 d!
		1 d@ d# 1 + 1 d!
		0 d@ d# 1 - 0 d!
	again ;

\ Sets a block of memory to an arbitrary byte value.

: setmem ( dst len c -- )
	begin
		1 d@ 0=if d> d> d> exit then
		0 d@ 2 d@ c!
		2 d@ d# 1 + 2 d!
		1 d@ d# 1 - 1 d!
	again ;

\ Zeros a block of memory.

: zermem ( dst len -- )
	d# 0 >d setmem ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\ This code is a test suite for getmem and fremem.

: get0		d# 1024 >d getmem
		d> 0=if S" expected non-null address from getmem" >d >d type cr bye then
		0 d@ h# 2010 xor if S" Expected block at $2010, got:" >d >d type _64 cr bye then ;
: get1		d# 1024 >d getmem
		d> 0=if S" expected non-null addr from getmem 2" >d >d type cr bye then
		0 d@ h# 2420 xor if S" Expected block at $2420, got:" >d >d type _64 cr bye then ;
: get2		d# 1024 >d getmem
		d> 0=if S" expected non-null addr from getmem 3" >d >d type cr bye then
		0 d@ h# 2830 xor if S" Expected block at $2830, got:" >d >d type _64 cr bye then ;
: get3		d# 1024 >d getmem
		d> 0=if S" expected non-null addr from getmem 4" >d >d type cr bye then
		0 d@ h# 2420 xor if S" Expected block at $2420 (get3), got:" >d >d type _64 cr bye then ;

: get4		d# 2048 >d getmem
		d> 0=if S" expected non-null address from getmem 5" >d >d type cr bye then
		0 d@ h# 2010 xor if S" Expected 2K block at $2010 (get4), got:" >d >d type _64 cr bye then ;
: get5		d# 2048 >d getmem
		d> 0=if S" expected non-null address from getmem 6" >d >d type cr bye then
		0 d@ h# 2C40 xor if S" Expected 2K block at $2C40 (get5), got:" >d >d type _64 cr bye then ;
: get6		d# 1048576 >d getmem
		d> 0=if S" expected non-null address from getmem 7" >d >d type cr bye then
		0 d@ h# 2010 xor if S" Expected 1M block at $2010 (get6), got:" >d >d type _64 cr bye then ;


: fre0		h# 2010 >d fremem ;
: fre1		h# 2420 >d fremem ;
: fre2		h# 2830 >d fremem ;
: fre3		h# 2C40 >d fremem ;

: memtest
	S" memtest:" >d >d type cr
	get0 get1 get2 fre1 get3 fre1 fre0 get4 get5 fre0 fre3 fre2 get6
	S" OK" >d >d type cr ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\
\ The string library maintains useful string-related procedures.


\ BSPL cannot record an empty string with S" ", so this procedure
\ pushes a zero-length string onto the stack manually.
: _emptystr
	d# 0 >d d# 0 >d ;

\ Duplicate a string in memory.  The only way this can fail is
\ if no memory is available for allocation; in this case, 0
\ is returned.  Otherwise, a suitably sized block of memory
\ is allocated, and the original string copied into it.  The
\ address returned is that of the new string.
\ 
\ Note that the caller is responsible for invoking fremem on
\ the duplicated string.

: strDup ( caddr u -- caddr' -1 | ? 0 )
	0 d@ >d getmem  0 d@ 0=if
		d> d> d# 0 >d exit
	then d>
	1 d@ >d		( caddr u caddr' u )
	3 d@ 2 d!	( caddr caddr caddr' u )
	1 d@ 3 d!	( caddr' caddr caddr' u )
	movmem d# -1 >d ;

\ Return true if and only if the two strings match, including
\ case.

extern asmstrcmp

: strEql ( a1 u1 a2 u2 -- -1 | 0 )
	asmstrcmp d> 0=if d# -1 >d exit then
	d# 0 >d ;

\ Splits a string at the first slash, intended for filesystem
\ navigation purposes.  This procedure always returns two strings.
\ The table below explains the relationship between an input string
\ I, and the resulting prefix string P and suffix string S:
\
\ I		P		S
\ ""		""		""
\ "/"		""		""
\ "foo"		"foo"		""
\ "foo/"	"foo"		""
\ "/foo"	""		"foo"
\ "/foo/"	""		"foo/"
\ "foo/bar"	"foo"		"bar"
\ "foo/bar/"	"foo"		"bar/"
\ "///"		""		"//"

: strSplitSlash ( ia iu -- sa su pa pu )
	1 d@ >d d# 0 >d		( sa su pa pu )
	begin
		2 d@ 0=if exit then
		3 d@ c@ char / lit, xor 0=if
			2 d@ d# 1 - 2 d!
			3 d@ d# 1 + 3 d!
			exit
		then
		0 d@ d# 1 + 0 d!
		2 d@ d# 1 - 2 d!
		3 d@ d# 1 + 3 d!
	again ;
		
: strTSplitEmpty
	_emptystr strSplitSlash
		d> if S"   splitEmpty: prefix length" >d >d type cr bye then d>
		d> if S"   splitEmpty: suffix length" >d >d type cr bye then d>
	S" /" >d >d strSplitSlash
		d> if S"   splitEmpty: / prefix length" >d >d type cr bye then d>
		d> if S"   splitEmpty: / suffix length" >d >d type cr bye then d> ;

: strTSplitSlash
	S" foo" >d >d strSplitSlash
		d> d# 3 xor if S"   splitSlash: prefix length" >d >d type cr bye then
		d# 3 >d S" foo" >d >d strEql d> 0=if S"   splitSlash: prefix" >d >d type cr bye then
		d> if S"   splitSlash: suffix length" >d >d type cr bye then d>
	S" foo/" >d >d strSplitSlash
		d> d# 3 xor if S"   splitSlash: / prefix length" >d >d type cr bye then
		d# 3 >d S" foo" >d >d strEql d> 0=if S"   splitSlash: / prefix" >d >d type cr bye then
		d> if S"   splitSlash: / suffix length" >d >d type cr bye then d>
	S" /foo" >d >d strSplitSlash
		d> if S"   splitSlash: prefix length /foo" >d >d type cr bye then d>
		d> d# 3 xor if S"   splitSlash: suffix length /foo" >d >d type cr bye then
		d# 3 >d S" foo" >d >d strEql d> 0=if S"   splitSlash: suffix /foo" >d >d type cr bye then
	S" /foo/" >d >d strSplitSlash
		d> if S"   splitSlash: prefix length /foo/" >d >d type cr bye then d>
		d> d# 4 xor if S"   splitSlash: suffix length /foo/" >d >d type cr bye then
		d# 4 >d S" foo/" >d >d strEql d> 0=if S"   splitSlash: suffix /foo/" >d >d type cr bye then ;

: strTSplitBlort
	S" foo/blort" >d >d strSplitSlash
		d> d# 3 xor if S"   splitBlort: prefix length" >d >d type cr bye then
		d# 3 >d S" foo" >d >d strEql d> 0=if S"   splitBlort: prefix" >d >d type cr bye then
		d> d# 5 xor if S"   splitBlort: suffix length" >d >d type cr bye then
		d# 5 >d S" blort" >d >d strEql d> 0=if S"   splitBlort: suffix" >d >d type cr bye then
	S" foo/blort/" >d >d strSplitSlash
		d> d# 3 xor if S"   splitBlort: prefix length" >d >d type cr bye then
		d# 3 >d S" foo" >d >d strEql d> 0=if S"   splitBlort: prefix" >d >d type cr bye then
		d> d# 6 xor if S"   splitBlort: suffix length" >d >d type cr bye then
		d# 6 >d S" blort/" >d >d strEql d> 0=if S"   splitBlort: suffix" >d >d type cr bye then ;

: strTest
	S" str:" >d >d type cr
	strTSplitEmpty strTSplitSlash strTSplitBlort
	S" OK" >d >d type cr ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\ ObjEnt objects bind a name to an STS object of some kind.
\ +0	Name
\ +8	Name Length
\ +16	Pointer to next entity
\ +24	Pointer to object

32 const szObjEnt

\ Initializes an object entry to default state.

: objEntInit ( a -- a )
	0 d@ >d  szObjEnt >d  zermem ;

\ Answers the length of the name for the entity.

: objEntNameLength ( a -- n )
	d> d# 8 + @ >d ;

\ Answers the pointer to the entity name.

: objEntNamePtr ( a -- a' )
	d> @ >d ;

\ Answers the next object in the entity chain, if any.

: objEntNext ( a -- a' )
	d> d# 16 + @ >d ;

\ Answers the object that the entity names.

: objEntObject ( a -- a' )
	d> d# 24 + @ >d ;

\ Sets the object that the entity binds.

: objEntSetObject ( a' a -- )
	d> d# 24 + d> swap ! ;

\ Creates a new entity.

: objEntNew ( -- a -1 | ? 0 )
	szObjEnt >d getmem 0 d@ 0=if exit then d> 
	objEntInit d# -1 >d ;

\ Disposes of an entity allocated by objEntNew.

: objEntDispose ( a -- )
	0 d@ @ if 0 d@ @ >d fremem then	( free name )
	fremem ;

\ Changes the name of the entity.
\ NOTE: Currently, you are responsible for freeing the original
\ name.  Changing the name without doing so will leak memory.

: objEntSetName ( caddr u a -- -1 | 0 )
	1 d@ 0 d@ d# 8 + !	( set length )
	2 d@ >d 2 d@ >d strDup d> 0=if
		d> d> d> d>
		d# 0 >d exit
	then
	d> d> !		( set name pointer )
	d> d> d# -1 >d ;

\ Answers the name of the entity.

: objEntName ( a -- caddr u )
	0 d@ >d objEntNameLength
	1 d@ @ 1 d! ;

\ Answers true if the entity possesses the given name.

: objEntIsNamed ( caddr u a -- -1 | 0 )
	objEntName strEql ;

: objEntTCreation
	objEntNew 0 d@ 0=if S"   creation: failed" >d >d type cr bye then d>
	objEntDispose ;

: _testName
	S" testName" >d >d ;

: objEntTName
	objEntNew 0 d@ 0=if S"   name: creation" >d >d type cr bye then d>
	_testName 2 d@ >d objEntSetName d> 0=if S"   name: set name" >d >d type cr bye then
	0 d@ >d objEntName
		d> d# 8 xor if S"   name: length mismatch" >d >d type cr bye then
		_testName d> d> d> xor 0=if S"   name: not copied" >d >d type cr bye then
	0 d@ >d objEntName _testName strEql d> 0=if S"   name: not equal" >d >d type cr bye then
	objEntDispose ;

: objEntTest
	S" ObjEnt:" >d >d type cr
	objEntTCreation objEntTName
	S" OK" >d >d type cr ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\ Obj objects represent generic filing system objects in a
\ unified name space.  ObjEnt structures refer to instances of
\ Obj.  Depending on the nature of the object, they could be
\ ObjDir, ObjFile, or some other Obj-derived entity.  Note that
\ Obj *itself* is abstract, and cannot be instantiated in any
\ meaningful sense on its own.  See ObjDir (below) for one way
\ to refine Obj into something reifiable.

\ Obj objects consist of a single field: a pointer to a jump
\ table.

8 const szObj

\ Answers the object's jump table.

: objVTable ( a -- a' )
	d> @ >d ;

\ Walks the object hierarchy by name, and if the named resource is
\ found, return it and a true flag.  Otherwise, return a false flag.
\
\ Note that this procedure is recursive; it uses memory in proportion
\ to the depth of the sought resource.  If the object tree is
\ malformed so that a cycle exists, this procedure will overflow your
\ stack and crash the system.

: objWalk ( caddr u a -- a' -1 | ? 0 )
	0 d@ >d objVTable call ;

\ Disposes of the object.

: objDispose ( a -- )
	0 d@ >d objVTable d> d# 4 + >d call ;


\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\ ObjDir objects map names to other (compatible) objects.  These
\ form the basis for STS' filesystem abstraction.  They are
\ essentially singly-linked lists of name->object pairs that
\ happens to also know which ObjDir is its container.
\ 
\ +0	VTable
\ +8	Parent
\ +16	Pointer to first ObjEnt record, or NULL.

24 const szObjDir

\ Answers the directory's parent.  If the directory is the root
\ directory, it will answer itself.

: objDirParent ( a -- a' )
	d> d# 8 + @ >d ;

\ Assigns the object a new parent.  Objects can belong to only 
\ one parent.

: objDirSetParent ( p a -- )
	d> d# 8 + d> swap ! ;

\ Answers the first ObjEnt assigned to the directory.

: objDirFirst ( a -- a' )
	d> d# 16 + @ >d ;

\ Objects are polymorphic in some circumstances.  The following
\ jump table provides linkage to the methods corresponding to
\ object messages of similar names.

jump-table: objDir_vtable
jump-entries: objDirWalk objDirDispose ;

\ Initializes an ObjDir.

: objDirInit ( a -- a )
	0 d@ >d szObjDir >d zermem
	objDir_vtable d> 0 d@ !				( vtable )
	0 d@ >d 0 d@ >d objDirSetParent ;		( we're a root directory )

\ Creates a new ObjDir directory object.  By default, it assumes
\ it's a root directory.  Use objDirSetParent to change this.

: objDirNew ( -- a -1 | ? 0 )
	szObjDir >d getmem 0 d@ 0=if exit then d>
	objDirInit d# -1 >d ;

\ Disposes of the object directory.  You should remove all
\ mounts before calling this procedure, or you will leak
\ memory.

: objDirDispose ( a -- )
	fremem ;

\ Adds an ObjEnt to the head of the ObjDir's list of bindings.

: objDirAddHead ( e a -- )
	0 d@ >d objDirFirst d> 1 d@ d# 16 + !	( set next field )
	d> d# 16 + d> swap ! ;

\ Removes an ObjEnt from the head of the ObjDir's binding list.

: objDirRemHead ( a -- a' )
	0 d@ >d objDirFirst
	0 d@ >d objEntNext  d> 1 d@ d# 16 + !
	d> 0 d! ;

\ Walks the object hierarchy by name, and if the named resource is
\ found, return it and a true flag.  Otherwise, return a false flag.
\
\ Note that this procedure is recursive; it uses memory in proportion
\ to the depth of the sought resource.  If the object tree is
\ malformed so that a cycle exists, this procedure will overflow your
\ stack and crash the system.

: objDirWalk ( caddr u a -- a' -1 | ? 0 )
	1 d@ 0=if	( null name? )
		0 d@ 2 d!  d# -1 1 d!  d>  exit
	then
	objDirFirst  2 d@ >d  2 d@ >d  strSplitSlash ( caddr u e sa su pa pu )
	begin 4 d@ while
		1 d@ >d 1 d@ >d 6 d@ >d objEntIsNamed d> if
			3 d@ 6 d!  2 d@ 5 d!
			d> d> d> d>
			objEntObject objWalk exit
		then
		4 d@ >d objEntNext d> 4 d!
	repeat d# 0 5 d! d> d> d> d> d> ;

: objDirTCreate
	objDirNew d> 0=if S"   create: failed" >d >d type cr bye then
	objDirDispose ;

: objDirTParent
	objDirNew d> 0=if S"   parent: creation" >d >d type cr bye then
	0 d@ >d objDirParent d> 0 d@ xor if S"   parent: expected root dir" >d >d type cr bye then
	objDirDispose ;

: objDirTEmpty
	objDirNew d> 0=if S"  empty: creation" >d >d type cr bye then
	0 d@ >d objDirFirst d> if S"   empty: content unexpected" >d >d type cr bye then
	objDirDispose ;

: objDirTFirst
	objDirNew d> 0=if S"   first: creation" >d >d type cr bye then
	objEntNew d> 0=if S"   first: entity" >d >d type cr bye then
	S" woohoo" >d >d 2 d@ >d objEntSetName d> 0=if S"   first: entity name" >d >d type cr bye then
	h# DEADBEEF >d 1 d@ >d objEntSetObject
	0 d@ >d 2 d@ >d objDirAddHead

	1 d@ >d objDirFirst d> 0 d@ xor if S" first: mismatch" >d >d type cr bye then
	1 d@ >d objDirRemHead d>
	objEntDispose objDirDispose ;

: objDirTWalk1
	objDirNew d> 0=if S"   walk: dir" >d >d type cr bye then

	objDirNew d> 0=if S"   walk: subdir" >d >d type cr bye then
	1 d@ >d 1 d@ >d objDirSetParent

	objEntNew d> 0=if S"   walk: ent" >d >d type cr bye then
	S" woo" >d >d 2 d@ >d objEntSetName d> 0=if S"   walk: ent name" >d >d type cr bye then
	1 d@ >d 1 d@ >d objEntSetObject
	0 d@ >d 3 d@ >d objDirAddHead

	_emptystr 4 d@ >d objDirWalk
		d> 0=if S" walk: can't find self" >d >d type cr bye then
		d> 2 d@ xor if S"   walk: self expected" >d >d type cr bye then
	S" woo" >d >d 4 d@ >d objDirWalk
		d> 0=if S" walk: can't find woo" >d >d type cr bye then
		d> 1 d@ xor if S"   walk: woo expected" >d >d type cr bye then
	S" bar" >d >d 4 d@ >d objDirWalk
		d> if S" walk: missing file found?" >d >d type cr bye then
		d>

	objEntDispose objDirDispose objDirDispose ;
	
: objDirTWalk2
	\ Construct the following object tree:
	\
	\ root
	\   sd1
	\   sd2
	\      sd3
	\         sd4

	objDirNew d> 0=if S"   walk2: root" >d >d type cr bye then
	objDirNew d> 0=if S"   walk2: subdir1" >d >d type cr bye then
	objDirNew d> 0=if S"   walk2: subdir2" >d >d type cr bye then
	objDirNew d> 0=if S"   walk2: subdir3" >d >d type cr bye then
	objDirNew d> 0=if S"   walk2: subdir4" >d >d type cr bye then

	( root sd1 sd2 sd3 sd4 )

	4 d@ >d 4 d@ >d objDirSetParent
	4 d@ >d 3 d@ >d objDirSetParent
	2 d@ >d 2 d@ >d objDirSetParent
	1 d@ >d 1 d@ >d objDirSetParent

	objEntNew d> 0=if S"   walk2: e1" >d >d type cr bye then
	objEntNew d> 0=if S"   walk2: e2" >d >d type cr bye then
	objEntNew d> 0=if S"   walk2: e3" >d >d type cr bye then
	objEntNew d> 0=if S"   walk2: e4" >d >d type cr bye then

	( root sd1 sd2 sd3 sd4 e1 e2 e3 e4 )
	
	S" sd1" >d >d 5 d@ >d objEntSetName d> 0=if S"   walk2: name sd1" >d >d type cr bye then
	S" sd2" >d >d 4 d@ >d objEntSetName d> 0=if S"   walk2: name sd2" >d >d type cr bye then
	S" sd3" >d >d 3 d@ >d objEntSetName d> 0=if S"   walk2: name sd3" >d >d type cr bye then
	S" sd4" >d >d 2 d@ >d objEntSetName d> 0=if S"   walk2: name sd4" >d >d type cr bye then

	7 d@ >d 4 d@ >d objEntSetObject
	6 d@ >d 3 d@ >d objEntSetObject
	5 d@ >d 2 d@ >d objEntSetObject
	4 d@ >d 1 d@ >d objEntSetObject

	3 d@ >d 9 d@ >d objDirAddHead
	2 d@ >d 9 d@ >d objDirAddHead
	1 d@ >d 7 d@ >d objDirAddHead
	0 d@ >d 6 d@ >d objDirAddHead

	S" sd2/sd3/sd4" >d >d 10 d@ >d objWalk
		d> 0=if S"   walk2: can't find sd4" >d >d type cr bye then
		d> 4 d@ xor if S"   walk2: sd4 expected" >d >d type cr bye then

	objEntDispose objEntDispose objEntDispose objEntDispose
	objDispose objDispose objDispose objDispose objDispose ;

: objDirTest
	S" objdir:" >d >d type cr
	objDirTCreate objDirTParent objDirTEmpty objDirTFirst objDirTWalk1 objDirTWalk2
	S" OK" >d >d type cr ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\ The ROM-resident shell.  Eventually, this will be placed into
\ an executable that resides in the ROM filesystem.  From there,
\ it will eventually find its way onto removable media (e.g.,
\ disk or SD card).  The shell is present in ROM only for debug
\ and bootstrapping purposes.

( Some utilities which I think will become official STS procedures )

\ Blocks until a valid ASCII character has been received from the
\ user's keyboard.  This procedure bypasses the file I/O interface,
\ so use with caution.  Where possible, use the file I/O interface
\ instead.  Note that getkey does not offer a timeout!
\
\ getkey ( -- ch )

: getkey	begin d# $0E00000000000001 c@ >d 0 d@ if exit then d> again ;
		( Use emulator debugger port for now. )

\ Prints an arbitrary string to the user's console, then blocks forever.
\
\ panic ( caddr u -- )

: panic		type cr begin again ;


: title
  S"     #####     ######    #####  " >d >d type cr
  S"    ##   ##      ##     ##   ## " >d >d type cr
  S"   ##           ##     ##      " >d >d type cr
  S"    #####       ##      #####  " >d >d type cr
  S"       ##      ##          ## " >d >d type cr
  S"  ##   ##      ##     ##   ## " >d >d type cr
  S"  #####       ##      #####  " >d >d type cr
  S"                             " >d >d type cr
  S"           STS V1.5" >d >d type cr cr ;
: copyr		S" Copyright 2014-2015 Samuel A. Falvo II, et. al." >d >d type cr cr ;
: license
  S" This software is subject to the terms of the Mozilla Public License, v. 2.0." >d >d type cr
  S" If a copy of the MPL was not distributed with this file, you can obtain one at" >d >d type cr
  S" https://mozilla.org/MPL/2.0/ ." >d >d type cr ;

: ident		title copyr license ;
: prompt	S" > " >d >d type ;

\ Gap buffer implementation to accept user input.
\ NOTE: This is an incomplete port of the implementation used in Kestrel-2
\ because we don't have raw PS/2 keyboard access, nor a directly addressible
\ terminal at our disposal.  When I enhance the emulator, this will change,
\ and we can revise the input handling to facilitate better editing features.

dword: ls	( points at buffer )
dword: le	( points at beginning of gap )
dword: rs	( points at text following gap )
dword: re	( points just beyond last character )

: resetsh	ls @ le !  ls @ d# 160 + rs !  ls @ d# 160 + re ! ;
: nobuf		S" E01 Insufficient memory for shell input buffer." >d >d panic ;
: initsh	d# 160 >d getmem d> 0=if nobuf then d> ls ! resetsh ;

: lebump	le @ d# 1 - le ! ;
: bs		ls @ le @ xor if backspace space backspace lebump then ;
: bumple	le @ d# 1 + le ! ;
: bumprs	rs @ d# 1 + rs ! ;
: insert	0 d@ le @ c!  bumple ;
: graphic	le @ rs @ xor if insert 0 d@ emit then ;
: handle	0 d@ d# 8 xor 0=if bs exit then
		graphic ;
: collapse	rs @ c@ le @ c!  bumple bumprs ;
: finish	begin rs @ re @ xor 0=if exit then collapse again ;

\ Block until the user has finished entering a whole line of text.
\ The user can use backspace and DEL keys to correct errors.
\ Use CTRL-F and CTRL-B to cursor forward or backward.
\
\ Note that subsequent calls to this procedure WILL OVERWRITE the
\ contents of the buffer from last time, so if you need to preserve
\ the contents of the buffer, you must do so before calling accept
\ again.
\ 
\ accept ( -- caddr u )

: accept	resetsh begin getkey 0 d@ d# 10 xor 0=if d> finish ls @ >d le @ ls @ - >d exit then handle again ;

: unknown	S" : unknown command" >d >d type ;

: dropchar	d> d> d# 1 + >d d# 1 - >d ;

: skipws
  begin	0 d@ 0=if exit then
	1 d@ c@ d# 33 - +if exit then
	dropchar
  again ;

: skipnws
  begin	0 d@ 0=if exit then
	1 d@ c@ d# 33 - -if exit then
	dropchar
  again ;

: romshell
  cr ident initsh
  begin	prompt accept
	skipws 1 d@ >r skipnws 1 d@ 0 r@ - r> >d >d
	cr type unknown cr
	d> d>
  again ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\ Luke-warm boot.  After BSPL's start-up code completes, it jumps to _
\ (yes, that's a single underscore).  BSPL's runtime does not expect _ to
\ return.

: banner	S" Booting STS V1.5" >d >d type cr ;
: mem0		h# 2000 >d  d# 16777216 d# 8192 - >d fmtmem ;
		( Nexys2 has 16MB of on-board RAM )

jump-table: ctvt
jump-entries: callTestProc banner ;

: callTestProc	S" call:" >d >d type cr S" ok" >d >d type cr ;
: callTest	ctvt call  ctvt d> d# 4 + >d call ;

: selfTest	memtest callTest strTest objEntTest objDirTest ;
: _		cr banner mem0 selfTest romshell bye ;

